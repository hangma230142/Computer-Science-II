
package com.gradescope.cs201;

import java.util.*;

public class Poker_hand_hw2 {
    private List<String> cards;

    public Poker_hand_hw2(String[] cards) {
        if (cards.length != 5) {
            throw new IllegalArgumentException("Exactly 5 cards are required.");
        }
        for (String card : cards) {
            if (!card.matches("(10|[2-9JQKA])[HDCS]")) {
                throw new IllegalArgumentException("Invalid card format: " + card);
            }
        }
        this.cards = new ArrayList<>(Arrays.asList(cards));
    }
    
    private int getRankValue(String card) {
        String rank = card.substring(0, card.length() - 1);
        switch (rank) {
            case "2": return 2;
            case "3": return 3;
            case "4": return 4;
            case "5": return 5;
            case "6": return 6;
            case "7": return 7;
            case "8": return 8;
            case "9": return 9;
            case "10": return 10;
            case "J": return 11;
            case "Q": return 12;
            case "K": return 13;
            case "A": return 14;
            default: throw new IllegalArgumentException("Invalid card rank: " + rank);
        }
    }

    public int get_category() {
        int[] rankCounts = new int[15];
        int[] suitCounts = new int[4];
        List<Integer> rankList = new ArrayList<>();
        
        for (String card : cards) {
            int rank = getRankValue(card);
            char suit = card.charAt(card.length() - 1);
            rankCounts[rank]++;
            if (suit == 'H') suitCounts[0]++;
            else if (suit == 'D') suitCounts[1]++;
            else if (suit == 'C') suitCounts[2]++;
            else if (suit == 'S') suitCounts[3]++;
            rankList.add(rank);
        }
        
        boolean isFlush = (suitCounts[0] == 5 || suitCounts[1] == 5 || suitCounts[2] == 5 || suitCounts[3] == 5);
        Collections.sort(rankList);
        boolean isStraight = (rankList.get(4) - rankList.get(0) == 4 && new HashSet<>(rankList).size() == 5) || rankList.equals(Arrays.asList(2, 3, 4, 5, 14));
        
        int pairs = 0, three = 0, four = 0;
        for (int count : rankCounts) {
            if (count == 4) four++;
            else if (count == 3) three++;
            else if (count == 2) pairs++;
        }
        
        if (isFlush && isStraight) return 9; // Straight Flush
        if (four == 1) return 8; // Four of a Kind
        if (three == 1 && pairs == 1) return 7; // Full House
        if (isFlush) return 6; // Flush
        if (isStraight) return 5; // Straight
        if (three == 1) return 4; // Three of a Kind
        if (pairs == 2) return 3; // Two Pair
        if (pairs == 1) return 2; // One Pair
        return 1; // High Card
    }

    public int compare_to(Poker_hand_hw2 other) {
        int categoryCompare = Integer.compare(this.get_category(), other.get_category());
        if (categoryCompare != 0) return categoryCompare;
        
        List<Integer> thisRanks = new ArrayList<>();
        List<Integer> otherRanks = new ArrayList<>();
        
        for (String card : cards) thisRanks.add(getRankValue(card));
        for (String card : other.cards) otherRanks.add(getRankValue(card));
        
        Collections.sort(thisRanks, Collections.reverseOrder());
        Collections.sort(otherRanks, Collections.reverseOrder());
        
        for (int i = 0; i < thisRanks.size(); i++) {
            int rankCompare = Integer.compare(thisRanks.get(i), otherRanks.get(i));
            if (rankCompare != 0) return rankCompare;
        }
        
        return 0;
    }
}
