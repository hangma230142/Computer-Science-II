import java.util.*;

public class BinaryTreeOperation_hw7<T> implements Hw7_interface<T> {

    @Override
    public BinaryTree<T> build_tree(String input_str) {
        if (input_str == null || input_str.isEmpty() || input_str.equals("()")) return null;

        Stack<BinaryTree<T>> stack = new Stack<>();
        Stack<Character> bracketStack = new Stack<>();
        boolean isLeftNull = false;
        int i = 1; // Skip the first '('

        while (i < input_str.length() - 1) { // Skip the last ')'
            if (input_str.charAt(i) == '(') {
                bracketStack.push('(');
                i++;
            } else if (input_str.charAt(i) == ')') {
                if (input_str.charAt(i - 1) == '(') {
                    isLeftNull = true;
                } else {
                    stack.pop();
                }
                bracketStack.pop();
                i++;
            } else {
                int start = i;
                while (i < input_str.length() && Character.isDigit(input_str.charAt(i))) {
                    i++;
                }
                Integer value = Integer.parseInt(input_str.substring(start, i));

                BinaryTree<T> node = new BinaryTree<>((T) value, null, null);
                if (!stack.isEmpty()) {
                    BinaryTree<T> parent = stack.peek();
                    if (parent.left == null && !isLeftNull) {
                        parent.left = node;
                    } else {
                        parent.right = node;
                        isLeftNull = false;
                    }
                }
                stack.push(node);
            }
        }

        while (stack.size() > 1) {
            stack.pop();
        }
        return stack.isEmpty() ? null : stack.pop();
    }

    private String print_tree_in_vertical_format_helper(BinaryTree<T> node,
                                                        String prefix,
                                                        boolean drawVertical) {

        if (node == null) {
            return prefix + "|_\n";
        }

        StringBuilder sb = new StringBuilder();

        sb.append(prefix)
                .append("|_")
                .append(node.data)
                .append("\n");

        boolean hasLeft = node.left != null;
        boolean hasRight = node.right != null;

        if (hasLeft || hasRight) {
            String childPrefix = prefix + (drawVertical ? "| " : "  ");

            if (hasLeft) {
                sb.append(print_tree_in_vertical_format_helper(
                        node.left,
                        childPrefix,
                        drawVertical
                ));
            } else {
                sb.append(childPrefix)
                        .append("|_\n");
            }

            if (hasRight) {
                sb.append(print_tree_in_vertical_format_helper(
                        node.right,
                        childPrefix,
                        false
                ));
            }
        }

        return sb.toString();
    }

    @Override
    public String print_tree_in_vertical_format(BinaryTree<T> root) {
        if (root == null) return "";

        StringBuilder sb = new StringBuilder();

        sb.append(root.data).append("\n");

        sb.append(print_tree_in_vertical_format_helper(root.left, "", true));
        if (root.right != null) {
            sb.append(print_tree_in_vertical_format_helper(root.right, "", false));
        }

        return sb.toString();
    }

    @Override
    public String print_tree_in_horizontal_format(BinaryTree<T> input_tree) {
        if (input_tree == null) return "";

        Queue<BinaryTree<T>> queue = new LinkedList<>();
        queue.add(input_tree);

        StringBuilder output = new StringBuilder();

        while (!queue.isEmpty()) {
            int levelSize = queue.size();

            for (int i = 0; i < levelSize; i++) {
                BinaryTree<T> node = queue.poll();
                output.append(node.data).append(" ");

                if (node.left != null) queue.add(node.left);
                if (node.right != null) queue.add(node.right);
            }

            output.append("\n");
        }

        return output.toString();
    }

    public static void main(String[] args) {
        BinaryTreeOperation_hw7<Integer> bto_hw7_int = new BinaryTreeOperation_hw7<>();
    
        BinaryTree<Integer> tree_1 = bto_hw7_int.build_tree("(1(2()(3(4)(5)))(6))");
        System.out.println(tree_1.print_to_string());
        System.out.println(bto_hw7_int.print_tree_in_vertical_format(tree_1));
        System.out.println(bto_hw7_int.print_tree_in_horizontal_format(tree_1));
    
        BinaryTree<Integer> tree_2 = bto_hw7_int.build_tree("(1(2()(3))(4(5)()))");
        System.out.println(tree_2.print_to_string());
        System.out.println(bto_hw7_int.print_tree_in_vertical_format(tree_2));
        System.out.println(bto_hw7_int.print_tree_in_horizontal_format(tree_2));
    
        BinaryTree<Integer> tree_3 = bto_hw7_int.build_tree("(1(2(3(4)())(5))(6(7(8)())(9(10)(11))))");
        System.out.println(tree_3.print_to_string());
        System.out.println(bto_hw7_int.print_tree_in_vertical_format(tree_3));
        System.out.println(bto_hw7_int.print_tree_in_horizontal_format(tree_3));
    }    
}

class BinaryTree<T> {
    T data;
    BinaryTree<T> left, right;

    public BinaryTree(T data, BinaryTree<T> left, BinaryTree<T> right) {
        this.data = data;
        this.left = left;
        this.right = right;
    }

    public String print_to_string() {
        String leftStr = (left != null) ? left.print_to_string() : "";
        String rightStr = (right != null) ? right.print_to_string() : "";

        if (leftStr.isEmpty() && rightStr.isEmpty()) {
            return "(" + data + ")";
        }

        return "(" + data + (leftStr.isEmpty() ? "()" : leftStr) + (rightStr.isEmpty() ? "()" : rightStr) + ")";
    }
}

interface Hw7_interface<T> {
    BinaryTree<T> build_tree(String input_str);
    String print_tree_in_vertical_format(BinaryTree<T> input_tree);
    String print_tree_in_horizontal_format(BinaryTree<T> input_tree);
}

